pipeline {
    agent any
    
    environment {
        PYTHONPATH = "$WORKSPACE"
    }

    stages {
        stage('Get Code') {
            steps {
                script {
                    // Obtener código del repositorio
                    git branch: 'develop', 
                    url: 'https://github.com/GemmaRamos/ejercicio1D.git'
                    
                    // Descargar el archivo samconfig.toml de la rama staging
                    sh 'curl -O https://raw.githubusercontent.com/GemmaRamos/ejercicio1D-config/staging/samconfig.toml'
                }
            }
        }
        
        stage('Static Test') {
            steps {
                dir('src') {
                    // Ejecutar pruebas de Flake8
                    sh '''
                        flake8 --exit-zero --format=pylint  . >flake8.out
                    '''
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]

                    // Ejecutar pruebas de Bandit
                    sh '''
                        bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
				}
            }
        }
        
        stage('Deploy') {
            steps {
                
                // Construir y validar recursos serverless
				sh 'sam validate --region us-east-1'
                sh 'sam build --template template.yaml'
 
                // Desplegar recursos serverless en entorno de Staging
                sh 'sam deploy --config-file samconfig.toml'
 
            }
        }
        

        stage('Rest Test') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        // Obtener el BASE_URL desde el resultado de AWS CLI
                        def BASE_URL = sh(
                            script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                            returnStdout: true
                        ).trim() // Eliminar espacios en blanco alrededor del resultado
        
                        echo "BASE_URL: $BASE_URL"
        
                        // Establecer la variable de entorno BASE_URL
                        withEnv(["BASE_URL=${BASE_URL}"]) {
                            // Ejecutar y publicar pruebas de integración con Pytest
                            sh "pytest -s --junitxml=result-rest.xml test/integration/todoApiTest.py"
                            junit 'result*.xml'
                        }
                    }
                }
            }
        }
        
    }
     
    post { 
        always { 
            // Limpiar Workspace
            cleanWs()
        }
    }
}
