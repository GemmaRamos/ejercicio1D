pipeline {
    agent none
    
    environment {
        PYTHONPATH = "$WORKSPACE"
    }

    stages {
        stage('Get Code') {
            agent {
                label 'agente-principal'
            }
            steps {
                // Obtener código del repositorio
                git branch: 'develop', 
                url: 'https://github.com/GemmaRamos/ejercicio1D.git'
				
				// Stash del código
				stash name: 'code', includes: '**/*'
            }
        }
        
        stage('Static Test') {
            agent {
                label 'agente-secundario-1'
            }
            steps {

                // Unstash del código 
                unstash name: 'code'
					
                // Ejecutar pruebas de Flake8
                sh '''
                    flake8 --exit-zero --format=pylint  . >flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]

                // Ejecutar pruebas de Bandit
                sh '''
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
            }
        }
        
        stage('Deploy') {
		    agent {
                label 'agente-principal'
            }
            steps {
                // Construir y validar recursos serverless
                sh 'sam validate --region us-east-1'
                sh 'sam build --template template.yaml'

                // Desplegar recursos serverless en entorno de Staging
                sh 'sam deploy --force-upload --stack-name todo-list-aws-staging --region us-east-1 --no-confirm-changeset --no-fail-on-empty-changeset --parameter-overrides Stage=staging --no-disable-rollback --config-env staging --capabilities CAPABILITY_IAM --resolve-s3'
                
                // Obtener la BASE_URL y stashearla para su uso posterior
                script{
                    def BASE_URL = sh(
                            script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text",
                            returnStdout: true
                        ).trim() // Eliminar espacios en blanco alrededor del resultado
        
                    echo "BASE_URL: $BASE_URL"
                    writeFile file: 'base_url.txt', text: BASE_URL
                    stash name: 'url_stash', includes: 'base_url.txt'

                }
            }
        }

        stage('Rest Test') {
            agent {
                label 'agente-secundario-2'
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        // Unstash del código
                        unstash 'code'
                        
                        // recuperar la base_url
                        unstash 'url_stash'
                        def BASE_URL = readFile('base_url.txt').trim()
                        echo "BASE_URL recuperado: $BASE_URL"
                        
                        // Establecer la variable de entorno BASE_URL
                        withEnv(["BASE_URL=${BASE_URL}"]) {
                            // Ejecutar y publicar pruebas de integración con Pytest
                            sh "pytest -s --junitxml=result-rest.xml test/integration/todoApiTest.py"
                            junit 'result*.xml'
                        }
                    }
                }
            }
        }

        stage('Promote') {
		    agent {
                label 'agente-principal'
            }
            steps {
                sh 'hostname'
                sh 'whoami'
                sh 'echo $WORKSPACE'
                
                sh '''
                    git checkout master
                    git merge develop
                '''
            }
        }
        
        stage('Clean WS') {
            agent {
                label 'agente-principal'
            }
            steps {
                // Limpiar Workspace
                cleanWs()
            }
        }
    }

}